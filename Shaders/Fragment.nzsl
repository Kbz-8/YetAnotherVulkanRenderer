[nzsl_version("1.0")]
module;

struct VertOut
{
	[location(0)] norm : vec3[f32],
	[location(1)] norm_mat : mat4[f32],
	[builtin(position)] pos: vec4[f32]
}

struct FragOut
{
	[location(0)] color: vec4[f32]
}

[entry(frag)]
fn main(input: VertOut) -> FragOut
{
	const ambient = vec3[f32](0.3, 0.3, 0.3);
	const directional_color = vec3[f32](1.0, 1.0, 1.0);
	let directional_vector = normalize(vec3[f32](0.85, 0.8, 0.75));

	let transformed_normal = mat3[f32](input.norm_mat) * input.norm;

	let directional : f32 = max(dot(transformed_normal.xyz, directional_vector), 0.0);
	let lighting : vec3[f32] = ambient + (directional_color * directional);

	let output: FragOut;
	output.color = vec4[f32](lighting, 1.0);
	return output;
}
